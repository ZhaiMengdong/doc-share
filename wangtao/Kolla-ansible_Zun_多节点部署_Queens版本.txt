Kolla-ansible_Zun_多节点部署_Queens版本

#参考文档
#[1] https://docs.openstack.org/kolla-ansible/latest/user/multinode.html
#[2] https://docs.openstack.org/kolla-ansible/latest/reference/zun-guide.html

#CentOS7.5测试环境通过
#建议控制节点内存7GB+，计算节点2GB+
#建议使用三个网口
#第一个网口连接管理网,配置管理IP地址,网关
#第二个网口作为隧道网络,配置IP地址,禁用网关:DEFROUTE=no
#第三个网口连接外部网络,不配置IP地址:ONBOOT=yes,BOOTPROTO=none


#配置主机名(建议使用如下名称)
#Kolla-ansible节点(部署Kolla-ansible)
hostnamectl set-hostname kolla01
#控制节点(部署OpenStack API等服务)
hostnamectl set-hostname control01
#计算节点(部署OpenStack计算服务)
hostnamectl set-hostname compute01
hostnamectl set-hostname compute02
hostnamectl set-hostname compute03


#所有节点配置/etc/hosts,使用管理IP地址
echo -e '192.168.122.113\tkolla01' >> /etc/hosts
echo -e '192.168.122.114\tcontrol01' >> /etc/hosts
echo -e '192.168.122.115\tcompute01' >> /etc/hosts
echo -e '192.168.122.116\tcompute02' >> /etc/hosts
echo -e '192.168.122.117\tcompute03' >> /etc/hosts


#所有节点配置环境
systemctl disable NetworkManager firewalld chronyd
systemctl stop NetworkManager firewalld chronyd
setenforce 0
sed -i "s/^SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config


#所有节点安装docker-ce并启用服务
yum -y install wget deltarpm epel-release
wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo
sed -i 's+download.docker.com+mirrors.ustc.edu.cn/docker-ce+' /etc/yum.repos.d/docker-ce.repo
yum -y install docker-ce python-pip
systemctl enable docker
systemctl start docker


#所有节点配置docker仓库(使用国内加速,可选)
wget -O- https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f5dad4ec.m.daocloud.io
systemctl restart docker


#kolla01节点安装ansible(版本>2.0)
yum -y install ansible


#kolla01节点配置RSA免密登录
ssh-copy-id root@kolla01
ssh-copy-id root@control01
ssh-copy-id root@compute01
ssh-copy-id root@compute02
ssh-copy-id root@compute03


#所有节点PIP源设置
mkdir -p ~/.pip
cat > ~/.pip/pip.conf << EOF
[global]
index-url = https://mirrors.ustc.edu.cn/pypi/web/simple
format = columns
EOF


#kolla01节点下载kolla-ansible
yum -y install git
cd ~
git clone http://git.trystack.cn/openstack/kolla-ansible -b stable/queens


#安装前修改如下文件
sed -i 's/^ - docker/# - docker/' ~/kolla-ansible/ansible/roles/baremetal/defaults/main.yml
cat << EOF > ~/kolla-ansible/ansible/roles/baremetal/templates/docker_systemd_service.j2
[Service]
MountFlags=shared
ExecStart=
ExecStart=/usr/bin/{{ docker_binary_name|default("docker daemon", true) }}{% if docker_registry %} --insecure-registry {{ docker_registry }}{% endif %}{% if docker_storage_driver %} --storage-driver {{ docker_storage_driver }}{% endif %} -H tcp://{{ api_interface_address }}:2375 -H unix:///var/run/docker.sock --cluster-store=etcd://{{ api_interface_address }}:2379 --cluster-advertise={{ api_interface_address }}:2375
EOF


#安装kolla-ansible
cd ~/kolla-ansible/
cp -r etc/kolla /etc/kolla
pip install -r requirements.txt
python setup.py install


#kolla01节点生成密码文件
kolla-genpwd


#kolla01节点编辑/etc/kolla/passwords.yml文件,配置keystone管理员用户密码
keystone_admin_password: password


#kolla01节点修改globals.yml文件,修改其中的IP地址为control01节点管理IP地址
cp /etc/kolla/globals.yml /etc/kolla/globals.yml.bak
cat << EOF > /etc/kolla/globals.yml
---
kolla_base_distro: "centos"
kolla_install_type: "source"
openstack_release: "queens"
kolla_internal_vip_address: "192.168.122.114"
docker_namespace: "kolla"
network_interface: "eth0"
neutron_external_interface: "eth2"
tunnel_interface: "eth1"
neutron_plugin_agent: "openvswitch"
enable_opendaylight_l3: "no"
enable_cinder_backup: "no"
enable_etcd: "yes"
enable_fluentd: "no"
enable_haproxy: "no"
enable_heat: "no"
enable_kuryr: "yes"
enable_zun: "yes"
nova_compute_virt_type: "kvm"
tempest_image_id:
tempest_flavor_ref_id:
tempest_public_network_id:
tempest_floating_network_name:
EOF


#kolla01节点编辑multinode文件
#可参考Kolla-ansible_Zun_multinode
cd ~/kolla-ansible/ansible/inventory/
vim multinode


#kolla01节点准备所有服务器基础环境
#配置NTP、配置/etc/systemd/system/docker.d/kolla.conf、安装docker python包等
kolla-ansible bootstrap-servers -i multinode -v


#kolla01节点检查配置
kolla-ansible prechecks -i multinode -vvv


#kolla01节点批量pull镜像
kolla-ansible pull -i multinode


#kolla01节点部署镜像
kolla-ansible deploy -i multinode -v


#kolla01节点创建/etc/kolla/admin-openrc.sh环境变量文件
kolla-ansible post-deploy
cp /etc/kolla/admin-openrc.sh ~


#kolla01节点安装OpenStack Client
yum -y install gcc python-devel
pip install python-openstackclient python-zunclient==1.2.0 oslo.log


#kolla01节点修改init-runonce文件,设置public network
vim /usr/share/kolla-ansible/init-runonce
EXT_NET_CIDR='192.168.200.0/24'
EXT_NET_RANGE='start=192.168.200.50,end=192.168.200.99'
EXT_NET_GATEWAY='192.168.200.1'


#kolla01节点加载OpenStack CLI所需的环境变量
source ~/admin-openrc.sh
#初始化部署:创建镜像、实例类型、安全组规则、网络等
/usr/share/kolla-ansible/init-runonce


#kolla01节点上传docker镜像至glance
docker pull cirros
docker save cirros | openstack image create cirros-docker --public --container-format docker --disk-format raw
#创建容器
zun create --name test --net network=demo-net --image-driver glance cirros-docker ping 8.8.8.8
#列出容器
zun list
#启动容器
zun start test


######重新部署######
#删除所有安装
kolla-ansible destroy -i multinode --yes-i-really-really-mean-it

#从系统中移除部署的容器
tools/cleanup-containers
#移除由于网络变化引发的Docker启动的neutron-agents主机
tools/cleanup-host
#从本地缓存中移除所有的Docker image
tools/cleanup-image


######Docker命令######
#查看卷
docker volume ls

#查看指定的卷
docker volume inspect volume_name

#查看指定容器的输出日志信息
docker logs container_name

#查看指定服务的日志
cd /var/lib/docker/volumes/kolla_logs/_data/

#在容器中执行命令
docker exec -it -u root container_name command

#清理本地所有容器
for C in $(docker ps -a | awk '{print$NF}'); do docker stop $C; docker rm $C; done


######ETCD命令#######
#etcd集群状态
etcdctl --endpoints "http://control01:2379" cluster-health






